/*
 Copyright (c) 2021

 All rights reserved.
 */
package com.spandigital.codechallenge.ranking;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * <p><b>Purpose:</b><br>
 * <br>
 *
 * <p><b>Title:</b> RankingCalculator<br>
 * <br>
 *
 * @author Kumbirai 'Coach' Mundangepfupfu<br>
 * @date 26 May 2021<br>
 * @version 1.0<br>
 *
 * <b>Revision:</b>
 * <br>
 *					
 */
public class RankingCalculator
{
	private static final Logger LOGGER = Logger.getLogger(RankingCalculator.class.getName());
	public static final String OUTPUT_FILE = "output.txt";

	private String filename;
	private List<String> scores;
	private List<Team> teams;

	/**
	 * Constructor: 
	 */
	private RankingCalculator()
	{
		super();
		teams = new ArrayList<>();
	}

	/**
	 * Constructor: @param filename
	 * @throws IOException 
	 */
	public RankingCalculator(String filename) throws IOException
	{
		this();
		this.filename = filename;
		readInputFile();
	}

	/**
	 * Constructor: @param scores
	 */
	public RankingCalculator(List<String> scores)
	{
		this();
		this.scores = scores;
	}

	/**
	 * Purpose:<br>
	 * <br>
	 * calculateRanking<br>
	 * <br><br>
	 * <br>
	 * @throws IOException 
	 */
	public void calculateRanking() throws IOException
	{
		scores.forEach(this::determinePoints);
		createOutputFile();
	}

	/**
	 * Purpose:<br>
	 * <br>
	 * readInputFile<br>
	 * <br><br>
	 * <br>
	 * @throws IOException 
	 * @throws  
	 */
	private void readInputFile() throws IOException
	{
		Path scoreFilePath = FileSystems.getDefault()
				.getPath("", this.filename)
				.toAbsolutePath();

		LOGGER.log(Level.INFO, "SCORES: {0}", scoreFilePath);

		try (Stream<String> stream = Files.lines(scoreFilePath))
		{
			scores = stream.collect(Collectors.toList());
		}
	}

	/**
	 * Purpose:<br>
	 * <br>
	 * determinePoints<br>
	 * <br>
	 * @param match<br>
	 * <br>
	 */
	private void determinePoints(String match)
	{
		//
		String[] teamScores = match.split(",");

		String[] team1 = extractScore(teamScores[0]);
		LOGGER.log(Level.INFO, String.format("'%s', '%s'", team1[0], team1[1]));
	}

	private String[] extractScore(String teamScore)
	{
		int idx = teamScore.lastIndexOf(" ");
		return new String[]
		{ teamScore.substring(0, idx), teamScore.substring(idx + 1) };
	}

	/**
	 * Purpose:<br>
	 * <br>
	 * createOutputFile<br>
	 * <br><br>
	 * <br>
	 * @throws IOException 
	 */
	private void createOutputFile() throws IOException
	{
		//
		Path outputFilePath = FileSystems.getDefault()
				.getPath("", OUTPUT_FILE)
				.toAbsolutePath();
		Files.write(outputFilePath, teams.stream()
				.sorted(Comparator.comparing(Team::getPoints)
						.thenComparing(Team::getName))
				.map(Team::toString)
				.collect(Collectors.toList()));
	}
}
